searchState.loadedDescShard("absurd", 0, "<code>N</code> is the initial chunk size (in bytes) <code>C</code> is the maximum …\nA map based on fixed-length array O(1) insert, O(n) lookup\n<code>BitSet</code> is a set of <code>usize</code> values. <code>E</code>: Integer + BitOps is …\na simple smart cell that have a custom destructure …\na helper struct to print iteration count and the elapsed …\nAllocates a value in the arena and returns a mutable …\nreturns a tightened range <code>(l, r)</code> such that …\nwrap the value in a box and leak, returning a static …\nwrap the value in a box and leak, returning a static …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nreturn mean and variance\nsatisfy <code>#[must_use]</code> but do nothing\nsatisfy <code>#[must_use]</code> but do nothing\nReturns true if the item is newly inserted (i.e. true …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAllocate a <code>Box&lt;[u8]&gt;</code> and read exactly <code>n</code> bytes in this …\nAllocate a <code>Box&lt;[u8]&gt;</code> and read exactly <code>n</code> bytes in this …\nAllocate a <code>Vec&lt;u8&gt;</code> and read all bytes until EOF in this …\nAllocate a <code>Vec&lt;u8&gt;</code> and read all bytes until EOF in this …\nAllocate a <code>Vec&lt;u8&gt;</code> with specified initial capacity and …\nAllocate a <code>Vec&lt;u8&gt;</code> with specified initial capacity and …\nAllocate a <code>String</code> and read all bytes until EOF in this …\nAllocate a <code>String</code> and read all bytes until EOF in this …\nAllocate a <code>Vec&lt;u8&gt;</code> with specified initial capacity and …\nAllocate a <code>Vec&lt;u8&gt;</code> with specified initial capacity and …\nReturns true if the item is removed (i.e. true means the …\nreturn mean and variance, reset the statistic\nCreate a new <code>BitSet</code> with at least the capacity (in bits).")